name: Waterline
description: >-
  A database-agnostic connectivity library for sending queries, managing dynamic
  db connections, committing/rolling back transactions, and more.
author:
  name: Syncano
  email: support@syncano.io
endpoints:
  connect:
    file: scripts/connect.js
    description: >-
      Lease a database connection, perform some logic, then release it back from
      whence it came.
    parameters:
      datastore:
        description: The identity of the datastore to use.
        example: larrysMySQLCluster
        required: true
        type: string
      during:
        description: >-
          A function with custom logic to run once the connection is
          established.
        extendedDescription: >-
          This function will be provided access to the active database
          connection.
        example: '->'
        required: true
        contract:
          inputs:
            connection:
              example: ===
          exits:
            success:
              outputFriendlyName: Result
              outputDescription: The data (if any) returned from the connection callback.
              outputExample: ===
        type: string
  query:
    file: scripts/query.js
    description: >-
      Compile a radar query statement into the native dialect for a database,
      then send the native query.
    parameters:
      datastore:
        description: The identity of the datastore to use.
        example: larrysMySQLCluster
        required: true
        type: string
      statement:
        description: A radar query statement to compile and send to the database.
        example: {}
        required: true
        type: object
  transaction:
    file: scripts/transaction.js
    description: >-
      Begin a transaction, perform some logic, then either commit the
      transaction if everything worked, or roll it back if there were any
      errors.
    parameters:
      datastore:
        description: The identity of the datastore to use.
        example: larrysMySQLCluster
        required: true
        type: string
      during:
        description: >-
          A function with custom logic to run once a database connection is
          established and a transaction has begun.
        extendedDescription: >-
          This function will be provided access to the active database
          connection.
        example: '->'
        required: true
        contract:
          inputs:
            connection:
              example: ===
          exits:
            success:
              outputFriendlyName: Result
              outputDescription: The data (if any) returned from the transaction callback.
              outputExample: ===
        type: string
